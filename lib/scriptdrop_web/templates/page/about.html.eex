<h1> READ ME ! </h1>

<div class="accordion" id="accordionExample">
    <div class="accordion-item">
        <h2 class="accordion-header" id="headingOne">
            <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#collapseOne" aria-expanded="true" aria-controls="collapseOne">
                System Login Credentials
            </button>
        </h2>
        <div id="collapseOne" class="accordion-collapse collapse show" aria-labelledby="headingOne" data-bs-parent="#accordionExample">
            <div class="accordion-body">
                <strong>The system uses GitHub for Login.</strong> <br />

                <p><i>I already created 2 GitHub accounts for testing both already linked with Pharmacy and Courier</i></p>
                <p>
                    <u><b>Pharmacy</b></u><br />
                    <b>login:</b> scriptdrop.pharmacy@gmail.com<br />
                    <b>password:</b> scriptdrop1!<br />
                </p>
                <p>
                    <u><b>Courier</b></u><br />
                    <b>login:</b> scriptdrop.delivery@gmail.com<br />
                    <b>password:</b> scriptdrop1!<br />
                </p>

                <p>
                    <u><b>If you want to use your own GitHub account</b></u><br />
                       <i>
                         * After you logged in, Access the menu: Admin Area -> Users <br />
                         * Find your GitHub email in the list of Users <br />
                         * Click in the Edit icon <br />
                         * Select your provider (Pharmacy or Courier) </b><br />
                         * Save
                        </i>

                </p>


            </div>
        </div>
    </div>
    <div class="accordion-item">
        <h2 class="accordion-header" id="headingTwo">
            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseTwo" aria-expanded="false" aria-controls="collapseTwo">
                Database ERD
            </button>
        </h2>
        <div id="collapseTwo" class="accordion-collapse collapse" aria-labelledby="headingTwo" data-bs-parent="#accordionExample">
            <div class="accordion-body">
                <strong><i>Data modeling</i></strong>

                <p>
                <img height="600" src="<%= Routes.static_path(@conn, "/images/scriptdropdb.png") %>" alt="ERD" />
                </p>

            </div>
        </div>
    </div>
    <div class="accordion-item">
        <h2 class="accordion-header" id="headingTwo">
            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseTwo" aria-expanded="false" aria-controls="collapseTwo">
                What was the hardest part of the implementation?
            </button>
        </h2>
        <div id="collapseTwo" class="accordion-collapse collapse" aria-labelledby="headingTwo" data-bs-parent="#accordionExample">
            <div class="accordion-body">
                <strong><i>This is an excellent question!</i></strong>

                <p>
                    In the past years I was dedicated 100% to OOP languages. Even though I had understood the paradigms of a functional language, my brain was so used to OOP that oftentimes I struggled to find solutions for simple problems. When I found them I’m sure I didn’t take 100% advantage of Elixir’s capabilities. This situation made me go back in time and relive when I was migrating from Desktop Development to Web Development. More specifically, the biggest difficulty I was faced was working with lists made up of Maps, Tuples or Structs and also getting the most out of the Ecto Framework. I knew the concepts but struggled to apply them. The Business part of the application was very clear to me since the first glance in the requirements document, but many times I felt like a Junior trying to implement something simple, oftentimes failing and restarting the cycle. As the days went by, this was easing as expected.
                    <br />
                    <em>
                    In order to implement a feature, I had to consider all aspects of a test or challenge, not just coding. I wasn’t just thinking in terms of performance and best practice but also how to show what I can do with Phoenix and Elixir. So yes, there are better ways to implement some features, performance-wise and architecture-wise.
                    <em>
                </p>

            </div>
        </div>
    </div>
    <div class="accordion-item">
        <h2 class="accordion-header" id="headingThree">
            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseThree" aria-expanded="false" aria-controls="collapseThree">
                What would be your next couple of tasks if you had more time?
            </button>
        </h2>
        <div id="collapseThree" class="accordion-collapse collapse" aria-labelledby="headingThree" data-bs-parent="#accordionExample">
            <div class="accordion-body">
                <strong><i>Even taking some risks extending what was asked for, I accomplished the challenge, but I am still thinking that I have a lot to improve in the app!</i></strong>

                <ul>
                    <li>
                        Use best practices to hide sensitive data like secret keys from external APIs
                    </li>
                    <li>
                        Develop a more user friendly Interface using Phoenix LiveView, Sockets or even VueJs/ReactJs
                    </li>
                    <li>
                        Add Some filter feature in some pages to facilitate users life
                    </li>
                    <li>
                        Improve the Order Workflow and Status Management. There are some gaps that need to be addressed
                    </li>
                    <li>
                        UI Data Formatting
                    </li>
                    <li>
                        Improve Server Call in View Pages (remove IFs)
                    </li>
                    <li>
                        More application security to prevent attacks
                    </li>
                    <li>
                        The home page that is the 'control panel' of pharmacies and couriers must be refactored. I am using an “IF” that I did not like, but to change this I would need more time to study Phoenix so I deceided not to do it for now
                    </li>
                    <li>
                        The system's administrative area should be rethought, but this would take a long time, so I looked for a solution that could show my skills and also solve the problem.
                    </li>
                    <li>
                        Solve a simple Bug that I left. I couldn't get the current local date, only UTC. This was frustrating. because I left it for fine-tuning thinking it would be commonplace, but it is not.
                    </li>
                    <li>
                        Replace Comboboxes to AutoComplete and enable in-line registration of customers, addresses, drugs, etc. For sure using LiveView or Sockets
                    </li>
                    <li>
                        Make Order feature more real, including fields like: Order Date, breaking down field Address to City, State, Street, etc  and create a separated entity in the database to store it.
                    </li>
                    <li>
                        I think I did not put unique keys in some necessary places; I would like to double check everything
                    </li>
                    <li>
                        Change a bit the application “Phoenix Contexts Design Patterns”, I don't think I made the best decisions in terms of clarity, but it's still pretty decent.
                    </li>
                    <li>
                        Use more Elixir Pattern Match
                    </li>
                    <li>
                        Change a field name in the Table Users (it can be confusing) change 'provider' to 'login_provider', also in the table orders the field 'status' was supposed to be 'status_id'
                    </li>
                    <li>
                        I have to improve the test coverage. Also I have some test failing due a big refactoring task I had done. I had to fix it.
                    </li>
                    <li>
                        Ecto usage: Controling Transactios, Creating Triggers using migrations, Load Referenced Tables in the main Schema
                    </li>
                    <li>
                        <del>Ecto usage: Foreing Key using Delete Cascade</del>
                    </li>
                    <li>
                        <del>Slightly improve the functionality that allows Users to enter a list of items that compose an Order. What I have right now, basicly shows the concept. But it is pretty much well done.</del>
                    </li>
                    <li>
                        <del>Using Socket to Change Order Status; I left a simple combo box which can break down the business workflow.</del>
                    </li>
                    <li>
                        <del>UI validation (message to the user)</del>
                    </li>
                    <li>
                        <del>Create a new entity in the database to track Orders (Business Workflow)</del>
                    </li>


                </ul>


            </div>
        </div>
    </div>

    <div class="accordion-item">
        <h2 class="accordion-header" id="headingFour">
            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseFour" aria-expanded="false" aria-controls="collapseThree">
                How could we change the project to be more interesting?
            </button>
        </h2>
        <div id="collapseFour" class="accordion-collapse collapse" aria-labelledby="headingFour" data-bs-parent="#accordionExample">
            <div class="accordion-body">
                <strong><i>For sure this challenge was well-designed!</i></strong>

                <p>
                    In fact, this project is very interesting, because I think it was designed in a way that a Junior programmer has the sense of exceeding expectations while a Senior would see small clues that show that the system is much deeper than it looks. Technically speaking and taking into account the nature of the language and framework used, requesting something that requires recursion would further exploit the programmer's skills in respect to Elixir Language; another requirement that could be interesting and would exploit the programmer's skills in respect to the Phoenix Framework would be something related to the social platforms, such as comments and delivery evaluation or even a chat feature, both very simple to accomplish using Phoenix.
                </p>


            </div>
        </div>
    </div>


</div>
